# SPDX-FileCopyrightText: James Turner <james@flightgear.org>
#
# SPDX-License-Identifier: GPL-2.0

variables:
  BUILD_DIR: "$CI_PROJECT_DIR/build"
  PREFIX_DIR: "$CI_PROJECT_DIR/simgear-dist"
  # create a root dir *above* the Simgear checkout, otherwise CMake
  # complains about INTERFACE_INCLUDE_DIRECTORIES being the source dir
  WIN_FG_DIR: $CI_BUILDS_DIR\flightgear
  MAC_IMAGE: macos-14-xcode-15
  OSG_REF: fgfs-osg-36-2
  BRANCH_REF: next

linux-build:
  image: registry.gitlab.com/flightgear/flightgear
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
  script:
    - rm $BUILD_DIR/CMakeCache.txt
    # --fresh would be ideal here
    - cmake -B $BUILD_DIR -S $CI_PROJECT_DIR -G Ninja 
      -D CMAKE_BUILD_TYPE=RelWithDebInfo 
      -D CMAKE_INSTALL_PREFIX=$PREFIX_DIR
      -D CMAKE_PREFIX_PATH=$CI_PROJECT_DIR/osg-dist
    - cmake --build $BUILD_DIR
    - cmake --build $BUILD_DIR --target install
  needs:
    - project: flightgear/openscenegraph
      job: linux-build
      ref: $OSG_REF
      artifacts: true
  artifacts:
    paths:
      - $PREFIX_DIR
  cache:
    paths:
      - $BUILD_DIR

windows-build:
  stage: build
  tags:
    - saas-windows-medium-amd64
  before_script:
    - C:\"Program Files (x86)\Microsoft Visual Studio"\2022\BuildTools\Common7\Tools\Launch-VsDevShell -SkipAutomaticLocation -Arch amd64
    - cmake --version
    - ninja --version

  # relocate our upstream deps outside the source dir, otherwise
  # CMake gets sad.
    - Move-Item -Path $CI_PROJECT_DIR\boost $WIN_FG_DIR\boost
    - Move-Item -Path $CI_PROJECT_DIR\msvc140 $WIN_FG_DIR\msvc140
  script:
    - cmake -B $env:BUILD_DIR -S $env:CI_PROJECT_DIR
      --fresh
      -G "Visual Studio 17 2022" -A x64
      -D CMAKE_BUILD_TYPE=RelWithDebInfo
      -D CMAKE_INSTALL_PREFIX=$env:PREFIX_DIR
      -D CMAKE_PREFIX_PATH=$env:CI_PROJECT_DIR/osg-dist
      -D MSVC_3RDPARTY_ROOT=$WIN_FG_DIR
      -DOSG_FSTREAM_EXPORT_FIXED:BOOL=ON
    - cmake --build $BUILD_DIR
    - cmake --build $BUILD_DIR --target install
  needs:
    - project: flightgear/openscenegraph
      job: windows_build
      ref: $OSG_REF
      artifacts: true
    - project: flightgear/windows-3rd-party
      job: windows_build_msvc140
      ref: master
      artifacts: true
  artifacts:
    paths:
      - $PREFIX_DIR
  cache:
    paths:
      - $BUILD_DIR

macos-build:
  stage: build
  tags:
    - saas-macos-medium-m1
  image: $MAC_IMAGE
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
  before_script:
      - export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
      - export HOMEBREW_NO_INSTALL_CLEANUP=1
      - brew install ninja cmake boost
  script:
    - cmake -B $BUILD_DIR -S $CI_PROJECT_DIR -G Ninja 
      --fresh
      -D CMAKE_BUILD_TYPE=RelWithDebInfo 
      -D CMAKE_INSTALL_PREFIX=$PREFIX_DIR
      -D CMAKE_PREFIX_PATH=$CI_PROJECT_DIR/osg-dist
      -D CMAKE_OSX_ARCHITECTURES=arm64
    - cmake --build $BUILD_DIR
    - cmake --build $BUILD_DIR --target install
  needs:
    - project: flightgear/openscenegraph
      job: macos-build
      ref: $OSG_REF
      artifacts: true
  artifacts:
    paths:
      - $PREFIX_DIR
  cache:
    paths:
      - $BUILD_DIR

macos-x64-build:
  stage: build
  tags:
    - saas-macos-medium-m1
  image: $MAC_IMAGE
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
  before_script:
      - export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
      - export HOMEBREW_NO_INSTALL_CLEANUP=1
      - brew install ninja cmake boost
  script:
  # we build with tests disabled because they need cross-compiled Boost test
  # libs, but that would mean installing x86_64 version of Boost via Homebrew in
  # the 'other' prefix (/usr/local), which gets messy.
    - cmake -B $BUILD_DIR -S $CI_PROJECT_DIR -G Ninja 
      --fresh
      -D CMAKE_BUILD_TYPE=RelWithDebInfo 
      -D CMAKE_INSTALL_PREFIX=$PREFIX_DIR
      -D CMAKE_PREFIX_PATH=$CI_PROJECT_DIR/osg-dist
      -D CMAKE_OSX_ARCHITECTURES=x86_64
      -DENABLE_TESTS:BOOL=OFF
    - cmake --build $BUILD_DIR
    - cmake --build $BUILD_DIR --target install
  needs:
    - project: flightgear/openscenegraph
      job: macos-build
      ref: $OSG_REF
      artifacts: true
  artifacts:
    paths:
      - $PREFIX_DIR
  cache:
    paths:
      - $BUILD_DIR

# test:doc:
#   image: registry.gitlab.com/ahayzen/home-dash-alpha-g1
#   stage: test
#   rules:
#     - if: $CI_PIPELINE_SOURCE != "schedule"
#   script:
#     - cargo test --all-features --doc
#     - cargo test --all-features --all-targets
#   cache:
#     paths:
#       - .cargo
#     policy: pull
#   dependencies:
#     - build


# run tests using the binary built before
test:
  image: registry.gitlab.com/flightgear/flightgear
  stage: test
  needs:
    - job: linux-build
  script:
    - cd $BUILD_DIR
    - ctest
  cache:
    paths:
      - $BUILD_DIR
